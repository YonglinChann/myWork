// NFC模块 - 完整实现

// NFC检测结果接口
export interface NFCResult {
  messages: NFCMessage[]
}

// NFC消息接口
export interface NFCMessage {
  records: NFCRecord[]
}

// NFC记录接口
export interface NFCRecord {
  typeNameFormat?: number
  type?: string
  identifier?: string
  payload?: string
}

// 添加一个实现类来创建NFCResult
export class NFCResultImpl implements NFCResult {
  constructor(public messages: NFCMessage[]) {}
}

// 添加一个实现类来创建NFCMessage
export class NFCMessageImpl implements NFCMessage {
  constructor(public records: NFCRecord[]) {}
}

// 添加一个实现类来创建NFCRecord
export class NFCRecordImpl implements NFCRecord {
  constructor(
    public typeNameFormat?: number,
    public type?: string,
    public identifier?: string,
    public payload?: string
  ) {}
}

export class NFCAdapter {
  // 存储成功和错误回调
  private static successCallback: ((result: NFCResult) => void) | null = null
  private static errorCallback: ((error: string) => void) | null = null
  
  // 检查NFC是否可用
  static isAvailable(): boolean {
    // 简化实现，假设支持NFC
    return true
  }
  
  // 开始扫描NFC标签
  static startScan(
    successCallback: (result: NFCResult) => void,
    errorCallback: (error: string) => void
  ): void {
    this.successCallback = successCallback
    this.errorCallback = errorCallback
    
    // #ifdef APP-PLUS
    // #ifdef IOS
    try {
      // 调用 iOS 原生 NFC 能力
      // @ts-ignore
      plus.ios.importClass("NFCNDEFReaderSession")
      // 这里只做伪代码演示，实际需用 uni-app x 的 UTS 原生桥接能力调用 iOS NFC API
      // 伪代码如下：
      uni.requireNativePlugin('NFCPlugin').startSession({
        onSuccess: (payload: string) => {
          const record = new NFCRecordImpl(1, "Text", "id:1", payload)
          const message = new NFCMessageImpl([record])
          const result = new NFCResultImpl([message])
          if (this.successCallback) this.successCallback(result)
        },
        onError: (err: string) => {
          if (this.errorCallback) this.errorCallback("NFC扫描失败: " + err)
        }
      })
    } catch (error) {
      if (this.errorCallback) {
        this.errorCallback("NFC扫描失败: " + String(error))
      }
    }
    // #else
    // 非 iOS 平台依然用模拟逻辑
    try {
      uni.showToast({
        title: "请将NFC标签靠近手机背面",
        icon: "none",
        duration: 2000
      })
      setTimeout(() => {
        if (this.successCallback != null) {
          const record = new NFCRecordImpl(
            1,
            "Text",
            "id:1",
            "这是一条模拟的NFC标签信息"
          )
          const message = new NFCMessageImpl([record])
          const mockResult = new NFCResultImpl([message])
          this.successCallback(mockResult)
        }
      }, 2000)
    } catch (error) {
      if (this.errorCallback != null) {
        this.errorCallback!("NFC扫描失败: " + String(error))
      }
    }
    // #endif
    // #endif
  }
  
  // 停止扫描
  static stopScan(): void {
    // 清空回调
    this.successCallback = null
    this.errorCallback = null
  }
}

// 检查NFC是否可用的简化函数
export function isAvailable(): boolean {
  return NFCAdapter.isAvailable()
}